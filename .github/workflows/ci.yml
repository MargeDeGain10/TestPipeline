# Nom du workflow qui apparaîtra dans l'onglet "Actions" de GitHub.
name: PHP Quality Assurance

# Déclencheurs : Quand ce workflow doit-il s'exécuter ?
on:
  push:
    branches: [ "main" ] # À chaque `git push` sur la branche `main`.
  pull_request:
    branches: [ "main" ] # À chaque création/mise à jour d'une Pull Request vers `main`.

# Jobs : Les tâches à effectuer. Un workflow peut avoir plusieurs jobs.
jobs:
  # On nomme notre job "build". C'est une convention, mais le nom est libre.
  build:
    # Machine virtuelle : Sur quel type de machine notre job va-t-il tourner ?
    runs-on: ubuntu-latest # On utilise une machine Linux Ubuntu récente.

    # Étapes : La liste des actions à exécuter séquentiellement.
    steps:
      # 1. Récupérer notre code
      # `uses` indique qu'on utilise une action pré-faite de la communauté.
      # `actions/checkout@v3` est l'action officielle pour cloner le code du dépôt.
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Installer PHP et Composer
      # `shivammathur/setup-php` est l'action la plus populaire pour cela.
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with: # Options pour l'action `setup-php`.
          php-version: '8.3'
          tools: composer:v2 # On demande aussi d'installer la v2 de composer.

      # 3. Installer les dépendances du projet
      # `run` exécute une simple commande shell dans la machine virtuelle.
      # On utilise `composer install` qui lit le `composer.lock` pour une installation déterministe.
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      # 4. Lancer le linter
      # On exécute le script que nous avons testé localement !
      - name: Run Linter (PHP-CS-Fixer)
        run: composer lint

      # 5. Lancer l'analyse statique
      # Idem, on réutilise notre script. C'est simple, lisible et cohérent.
      - name: Run Static Analysis (PHPStan)
        run: composer analyse
